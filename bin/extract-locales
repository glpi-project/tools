#!/bin/bash

#
# ---------------------------------------------------------------------
# GLPI - Gestionnaire Libre de Parc Informatique
# Copyright (C) 2015-2021 Teclib' and contributors.
#
# http://glpi-project.org
#
# based on GLPI - Gestionnaire Libre de Parc Informatique
# Copyright (C) 2003-2014 by the INDEPNET Development Team.
#
# ---------------------------------------------------------------------
#
# LICENSE
#
# This file is part of GLPI.
#
# GLPI is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# GLPI is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GLPI. If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------------------------------------------
#

SCRIPT_DIR=$(dirname $0)
if [[ "$SCRIPT_DIR" == *"/vendor/glpi-project/tools"* ]]; then
    # Script is executed from "vendor/glpi-project/tools/bin" directory
    WORKING_DIR=$(readlink -f "$SCRIPT_DIR/../../../..")
else
    # Script is executed from "vendor/bin" directory
    WORKING_DIR=$(readlink -f "$SCRIPT_DIR/../..")
fi;

# Define translate function args
F_ARGS_N="1,2"
F_ARGS__S="1"
F_ARGS__="1"
F_ARGS_X="1c,2"
F_ARGS_SX="1c,2"
F_ARGS_NX="1c,2,3"
F_ARGS_SN="1,2"

# Compute POT filename
if [ -f "$WORKING_DIR/setup.php" ]; then
    # setup.php found: it's a plugin.
    NAME="$(grep -m1 "PLUGIN_.*_VERSION" $WORKING_DIR/setup.php | cut -d _ -f 2)"
    EXCLUDE_REGEX="^.\/(\..*|(libs?|node_modules|tests|vendor)\/).*"

    # Only strings with domain specified are extracted (use Xt args of keyword param to set number of args needed)
    F_ARGS_N="$F_ARGS_N,4t"
    F_ARGS__S="$F_ARGS__S,2t"
    F_ARGS__="$F_ARGS__,2t"
    F_ARGS_X="$F_ARGS_X,3t"
    F_ARGS_SX="$F_ARGS_SX,3t"
    F_ARGS_NX="$F_ARGS_NX,5t"
    F_ARGS_SN="$F_ARGS_SN,4t"
else
    # using core most probably
    NAME="GLPI"
    EXCLUDE_REGEX="^.\/(\..*|(config|files|lib|marketplace|node_modules|plugins|public|tests|tools|vendor)\/).*"
fi;
POTFILE="$WORKING_DIR/locales/${NAME,,}.pot"

# Clean existing POT file
if [ ! -d "$WORKING_DIR/locales" ]; then
    mkdir $WORKING_DIR/locales
fi

rm -f $POTFILE && touch $POTFILE

# Append locales from PHP
cd $WORKING_DIR
xgettext `find -regextype posix-egrep -not -regex $EXCLUDE_REGEX -type f -name "*.php"` \
    -o $POTFILE \
    -L PHP \
    --add-comments=TRANS \
    --from-code=UTF-8 \
    --force-po \
    --join-existing \
    --sort-output \
    --keyword=_n:$F_ARGS_N \
    --keyword=__s:$F_ARGS__S \
    --keyword=__:$F_ARGS__ \
    --keyword=_x:$F_ARGS_X \
    --keyword=_sx:$F_ARGS_SX \
    --keyword=_nx:$F_ARGS_NX \
    --keyword=_sn:$F_ARGS_SN

# Append locales from JavaScript
cd $WORKING_DIR
xgettext `find -regextype posix-egrep -not -regex $EXCLUDE_REGEX -type f -name "*.js" -not -name "*.min.js"` \
    -o $POTFILE \
    -L JavaScript \
    --add-comments=TRANS \
    --from-code=UTF-8 \
    --force-po \
    --join-existing \
    --sort-output \
    --keyword=_n:$F_ARGS_N \
    --keyword=__:$F_ARGS__ \
    --keyword=_x:$F_ARGS_X \
    --keyword=_nx:$F_ARGS_NX \
    --keyword=i18n._n:$F_ARGS_N \
    --keyword=i18n.__:$F_ARGS__ \
    --keyword=i18n._p:$F_ARGS_X \
    --keyword=i18n.ngettext:$F_ARGS_N \
    --keyword=i18n.gettext:$F_ARGS__ \
    --keyword=i18n.pgettext:$F_ARGS_X

# Append locales from Twig templates

## Following PHP script convert file content to surround i18n functions call by PHP opening/closing tag
## (i.e. `__('x')` -> `<?php __('x'); ?>`
TWIG_TRANSFORM_SCRIPT=$(cat <<'PHP'
    $content = file_get_contents($argv[1]);

    $offset = 0;
    $matches = [];
    do {
        if (preg_match('/(?<function>__|_n|_x|_nx)\(/', $content, $matches, PREG_OFFSET_CAPTURE, $offset) !== 1) {
           break;
        }
        $content_length  = strlen($content);
        $function_offset = $matches['function'][1];
        $function_length = strlen($matches['function'][0]);
        $opening_parenthesis = 0;
        $closing_parenthesis = 0;
        $is_inside_quotes    = false;
        $quote_char          = null;
        do {
            $char = $content[$function_offset + $function_length];
            if ($char === '\\') {
                // escape char, ignore next char
                $function_length++;
            } elseif ($is_inside_quotes && $quote_char == $char) {
                $is_inside_quotes = false;
            } elseif (!$is_inside_quotes && ($char === '\'' || $char === '"')) {
                $is_inside_quotes = true;
                $quote_char = $char;
            } elseif (!$is_inside_quotes && $char === '(') {
                $opening_parenthesis++;
            } elseif (!$is_inside_quotes && $char === ')') {
                $closing_parenthesis++;
            }
            $function_length++;

            if ($function_offset + $function_length > $content_length) {
                break 2; // closing parenthesis not found, probably a syntax issue
            }
        } while ($closing_parenthesis < $opening_parenthesis);

        $content_before  = substr($content, 0, $function_offset);
        $content_altered = '<?php ' . substr($content, $function_offset, $function_length) . '; ?>';
        $content_after   = substr($content, $function_offset + $function_length);
        $content         = $content_before . $content_altered . $content_after;

        $offset = $function_offset + strlen($content_altered);
    } while (true);

    echo $content;
PHP
)

## 1. Transform twig files and save them into temp dir
TEMP_TWIG_DIR=$(mktemp -d -t glpi-locales-XXXXXXXX)
cd $WORKING_DIR
for file in $(find -regextype posix-egrep -not -regex $EXCLUDE_REGEX -type f -name "*.twig")
do
    mkdir -p $(dirname $TEMP_TWIG_DIR/$file)
    php -r "$TWIG_TRANSFORM_SCRIPT" "$WORKING_DIR/$file" > "$TEMP_TWIG_DIR/$file"
done

## 2. Extract string from transformed files
cd $TEMP_TWIG_DIR
xgettext `find -type f -name "*.twig"` \
    -o $POTFILE \
    -L PHP \
    --add-comments=TRANS \
    --from-code=UTF-8 \
    --force-po \
    --join-existing \
    --sort-output \
    --keyword=_n:$F_ARGS_N \
    --keyword=__:$F_ARGS__ \
    --keyword=_x:$F_ARGS_X \
    --keyword=_nx:$F_ARGS_NX

## 3. Clean temporary dir
cd $WORKING_DIR
rm -r $TEMP_TWIG_DIR

# Update main language
LANG=C msginit --no-translator -i $POTFILE -l en_GB -o $WORKING_DIR/locales/en_GB.po
